// Dylan Dennison
// implementaion file
// project 1 big int
// cs23001

#include "bigint.hpp"

bigint::bigint(){ //initializes all(default constructor)
	for (int i = 0; i < CAPACITY; ++i) //setting all elements to zero
		bigIntArray[i] = 0;
}

bool bigint::operator==(const bigint& rhs) { //equals operator, compares two instances of bigInt
   for (int i = 0; i < CAPACITY; ++i) {
	if(bigIntArray[i] != rhs.bigIntArray[i])
		return false;
   }
   return true;
}

bigint::bigint(int num): bigint() {             //puts each number in an element
for (int i = 0; i < CAPACITY; i++) {
	bigIntArray[i] = num % 10;
	num = num / 10;
}
}

bigint::bigint(const char charArray[]) : bigint() {  //takes charArray and puts it into bigIntArray
int arraySize = 0;

while(charArray[arraySize] != '\0'){
	++arraySize;
}
--arraySize;
for(int i = 0; arraySize >= 0; ++i, --arraySize){
	bigIntArray[i] = charArray[arraySize] - '0';
}
}

void bigint::debugPrint() const {  //prints array
for (int i = CAPACITY-1; i >= 0; --i){
	std::cout << bigIntArray[i] << "|";
}
}

std::ostream& operator<<(std::ostream& out, bigint rhs) { //outputs array in correct order
int count = 0;
bool check = false;
for(int i = CAPACITY-1; i >= 0; --i){

	if(rhs.bigIntArray[i] > 0)
		check = true;
	if(check == true){
		out << char(rhs.bigIntArray[i] + '0');
		++count;
	}
	/*if(count > 79) {
		out << std::endl;
		count = 0;
	}*/
}

return out;
}
